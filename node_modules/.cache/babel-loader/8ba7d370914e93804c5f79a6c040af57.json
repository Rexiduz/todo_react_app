{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pegatech/Downloads/todo_react_app/src/hook/auth-context.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useHistory, useLocation, useParams, useRouteMatch } from 'react-router';\nimport { fetchMe, loginAdmin, loginLocal } from '../feature/auth/auth-api-services';\nimport { getTodoList } from '../feature/todo/todo-api-service';\n/**\n * @typedef AuthContext\n * @property {any} me\n * @property {boolean} loading\n * @property { (profile: object, shopName: string) => PromiseLike<void> } handleLineLogin\n * @property { (profile: object) => PromiseLike<void> } handleAdminLineLogin\n * @property { () => boolean } isAdmin\n */\n\n/** @type {import('react').Context<AuthContext>} */\n\nexport const AuthContext = /*#__PURE__*/React.createContext();\nexport const AuthProvider = props => {\n  _s();\n\n  const [me, setMe] = React.useState({});\n  const [loading, setLoading] = React.useState(true);\n  const h = useHistory();\n  React.useEffect(() => {\n    fetchInit();\n  }, []);\n\n  const isAdmin = () => {\n    if (loading == true) return false;\n    return me.userType === 'ADMIN';\n  };\n\n  const fetchInit = async () => {\n    try {\n      setLoading(true);\n      let token = localStorage.getItem('token');\n\n      if (token) {\n        await getTodoList();\n        h.push('/TodoList');\n      } else {// h.push(props.match.url);\n      }\n    } catch (error) {\n      localStorage.removeItem('token');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  function setAuth(token) {\n    setMe(token);\n\n    if (token) {\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }\n\n  async function handleAdminLogin(loginData) {\n    try {\n      let token = await loginAdmin(loginData);\n\n      if (token.data.token) {\n        setAuth(token.data.token);\n        return token.data.token;\n      }\n\n      return token;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  async function handleLocalLogin(loginData) {\n    try {\n      let resLogin = await loginLocal(loginData);\n\n      if (resLogin.data.success) {\n        setAuth(resLogin.data.token);\n        return resLogin.data;\n      }\n\n      return resLogin.data;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      me,\n      isAdmin,\n      handleLocalLogin,\n      handleAdminLogin,\n      loading\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"xlQFJEcGKN6yI7K/xTp516jMm08=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/pegatech/Downloads/todo_react_app/src/hook/auth-context.jsx"],"names":["React","useHistory","useLocation","useParams","useRouteMatch","fetchMe","loginAdmin","loginLocal","getTodoList","AuthContext","createContext","AuthProvider","props","me","setMe","useState","loading","setLoading","h","useEffect","fetchInit","isAdmin","userType","token","localStorage","getItem","push","error","removeItem","setAuth","setItem","handleAdminLogin","loginData","data","Error","handleLocalLogin","resLogin","success","children"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useHistory, useLocation, useParams, useRouteMatch } from 'react-router';\nimport { fetchMe, loginAdmin, loginLocal } from '../feature/auth/auth-api-services';\nimport { getTodoList } from '../feature/todo/todo-api-service';\n\n/**\n * @typedef AuthContext\n * @property {any} me\n * @property {boolean} loading\n * @property { (profile: object, shopName: string) => PromiseLike<void> } handleLineLogin\n * @property { (profile: object) => PromiseLike<void> } handleAdminLineLogin\n * @property { () => boolean } isAdmin\n */\n\n/** @type {import('react').Context<AuthContext>} */\nexport const AuthContext = React.createContext();\n\nexport const AuthProvider = (props) => {\n    \n    const [me, setMe] = React.useState({});\n    const [loading, setLoading] = React.useState(true);\n    const h = useHistory();\n\n    \n    React.useEffect(() => {\n        fetchInit();\n    }, []);\n\n    const isAdmin = () => {\n        if (loading == true) return false;\n        return me.userType === 'ADMIN'\n    }\n\n    const fetchInit = async () => {\n        try {\n            setLoading(true);\n            let token = localStorage.getItem('token');\n            \n            if (token) {\n                await getTodoList()\n                h.push('/TodoList')\n            } else {\n                // h.push(props.match.url);\n            }\n\n        } catch (error) {\n            localStorage.removeItem('token');\n        } finally {\n            setLoading(false);\n        }\n    }\n\n\n    function setAuth(token) {\n        setMe(token);\n        if (token) {\n            localStorage.setItem('token', token);\n        } else {\n            localStorage.removeItem('token');\n        }\n    }\n\n\n    async function handleAdminLogin(loginData) {\n        try {\n            let token = await loginAdmin(loginData);\n            if (token.data.token) {\n                setAuth(token.data.token);\n                return token.data.token\n            }\n            return token\n        } catch (error) {\n            throw new Error(error)\n        }\n    }\n\n\n    async function handleLocalLogin(loginData) {\n        try {\n            let resLogin = await loginLocal(loginData);\n            if (resLogin.data.success) {\n                setAuth(resLogin.data.token);\n                return resLogin.data\n            }\n            return resLogin.data\n        } catch (error) {\n            throw new Error(error)\n        }\n\n    }\n\n    return (\n        <AuthContext.Provider value={{ me, isAdmin, handleLocalLogin, handleAdminLogin, loading }}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}