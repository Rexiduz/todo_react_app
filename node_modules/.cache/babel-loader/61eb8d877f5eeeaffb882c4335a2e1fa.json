{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pegatech/Downloads/todo_react_app/src/hook/auth-context.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useHistory, useLocation, useParams, useRouteMatch } from 'react-router';\nimport { fetchMe, loginAdmin, loginLocal } from '../feature/auth/auth-api-services';\n/**\n * @typedef AuthContext\n * @property {any} me\n * @property {boolean} loading\n * @property { (profile: object, shopName: string) => PromiseLike<void> } handleLineLogin\n * @property { (profile: object) => PromiseLike<void> } handleAdminLineLogin\n * @property { () => boolean } isAdmin\n */\n\n/** @type {import('react').Context<AuthContext>} */\n\nexport const AuthContext = /*#__PURE__*/React.createContext();\nexport const AuthProvider = props => {\n  _s();\n\n  console.log('props : ', props);\n  const [me, setMe] = React.useState({});\n  const [loading, setLoading] = React.useState(true);\n  const match = useRouteMatch();\n  const location = useLocation();\n  const h = useHistory();\n  React.useEffect(() => {\n    fetchInit();\n  }, []);\n\n  const isAdmin = () => {\n    if (loading == true) return false;\n    return me.userType === 'ADMIN';\n  };\n\n  const fetchInit = async () => {\n    try {\n      setLoading(true);\n      let token = localStorage.getItem('token');\n      console.log('fetchInit token : ', token);\n\n      if (token) {\n        let res = await fetchMe();\n\n        if (res.data.success) {\n          setMe(res.data.data);\n        }\n      } else {// h.push(props.match.url);\n      }\n    } catch (error) {\n      console.log(error);\n      localStorage.removeItem('token');\n      h.push(match.url);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  function setAuth(token) {\n    setMe(token);\n\n    if (token) {\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }\n\n  async function handleAdminLogin(loginData) {\n    try {\n      let token = await loginAdmin(loginData);\n\n      if (token.data.token) {\n        setAuth(token.data.token);\n        return token.data.token;\n      }\n\n      return token;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  async function handleLocalLogin(loginData) {\n    try {\n      let resLogin = await loginLocal(loginData);\n\n      if (resLogin.data.success) {\n        setAuth(resLogin.data.token);\n        return resLogin.data;\n      }\n\n      return resLogin.data;\n    } catch (error) {\n      throw new Error(error);\n    }\n  } // const handleLogout = (e) => {\n  //     e.preventDefault();\n  //     Swal.fire({\n  //         title: 'ต้องการออกจากระบบหรือไม่ ?',\n  //         // text: \"ยืนยันการออกจากระบบ!\",\n  //         type: 'warning',\n  //         showCancelButton: true,\n  //         confirmButtonColor: '#409444',\n  //         cancelButtonColor: '#8B1515',\n  //         confirmButtonText: 'ตกลง',\n  //         showLoaderOnConfirm: true,\n  //         cancelButtonText: 'ยกเลิก',\n  //     }).then(res => {\n  //         if (res.value === true) {\n  //             let part = location.pathname.split('/')\n  //             let shopName = part[2];\n  //             // let page = part[2];\n  //             setAuth({}, null);\n  //             h.push(`/shop/${shopName}/`);\n  //             $('#smart_q_navbar').collapse('hide')\n  //         }\n  //     })\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      me,\n      isAdmin,\n      handleLocalLogin,\n      handleAdminLogin,\n      loading\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"/kZUZfgThUznGa58Mqm8R6qJHDM=\", false, function () {\n  return [useRouteMatch, useLocation, useHistory];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/pegatech/Downloads/todo_react_app/src/hook/auth-context.jsx"],"names":["React","useHistory","useLocation","useParams","useRouteMatch","fetchMe","loginAdmin","loginLocal","AuthContext","createContext","AuthProvider","props","console","log","me","setMe","useState","loading","setLoading","match","location","h","useEffect","fetchInit","isAdmin","userType","token","localStorage","getItem","res","data","success","error","removeItem","push","url","setAuth","setItem","handleAdminLogin","loginData","Error","handleLocalLogin","resLogin","children"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,SAAlC,EAA6CC,aAA7C,QAAkE,cAAlE;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,UAA9B,QAAgD,mCAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA,OAAO,MAAMC,WAAW,gBAAGR,KAAK,CAACS,aAAN,EAApB;AAEP,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAyBF,KAAzB;AACA,QAAM,CAACG,EAAD,EAAKC,KAAL,IAAcf,KAAK,CAACgB,QAAN,CAAe,EAAf,CAApB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBlB,KAAK,CAACgB,QAAN,CAAe,IAAf,CAA9B;AACA,QAAMG,KAAK,GAAGf,aAAa,EAA3B;AACA,QAAMgB,QAAQ,GAAGlB,WAAW,EAA5B;AACA,QAAMmB,CAAC,GAAGpB,UAAU,EAApB;AAGAD,EAAAA,KAAK,CAACsB,SAAN,CAAgB,MAAM;AAClBC,IAAAA,SAAS;AACZ,GAFD,EAEG,EAFH;;AAIA,QAAMC,OAAO,GAAG,MAAM;AAClB,QAAIP,OAAO,IAAI,IAAf,EAAqB,OAAO,KAAP;AACrB,WAAOH,EAAE,CAACW,QAAH,KAAgB,OAAvB;AACH,GAHD;;AAKA,QAAMF,SAAS,GAAG,YAAY;AAC1B,QAAI;AACAL,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAIQ,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAmCa,KAAnC;;AACA,UAAIA,KAAJ,EAAW;AACP,YAAIG,GAAG,GAAG,MAAMxB,OAAO,EAAvB;;AACA,YAAIwB,GAAG,CAACC,IAAJ,CAASC,OAAb,EAAsB;AAClBhB,UAAAA,KAAK,CAACc,GAAG,CAACC,IAAJ,CAASA,IAAV,CAAL;AACH;AACJ,OALD,MAKO,CACH;AACH;AAEJ,KAbD,CAaE,OAAOE,KAAP,EAAc;AACZpB,MAAAA,OAAO,CAACC,GAAR,CAAYmB,KAAZ;AACAL,MAAAA,YAAY,CAACM,UAAb,CAAwB,OAAxB;AACAZ,MAAAA,CAAC,CAACa,IAAF,CAAOf,KAAK,CAACgB,GAAb;AACH,KAjBD,SAiBU;AACNjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GArBD;;AAwBA,WAASkB,OAAT,CAAiBV,KAAjB,EAAwB;AACpBX,IAAAA,KAAK,CAACW,KAAD,CAAL;;AACA,QAAIA,KAAJ,EAAW;AACPC,MAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BX,KAA9B;AACH,KAFD,MAEO;AACHC,MAAAA,YAAY,CAACM,UAAb,CAAwB,OAAxB;AACH;AACJ;;AAGD,iBAAeK,gBAAf,CAAgCC,SAAhC,EAA2C;AACvC,QAAI;AACA,UAAIb,KAAK,GAAG,MAAMpB,UAAU,CAACiC,SAAD,CAA5B;;AACA,UAAIb,KAAK,CAACI,IAAN,CAAWJ,KAAf,EAAsB;AAClBU,QAAAA,OAAO,CAACV,KAAK,CAACI,IAAN,CAAWJ,KAAZ,CAAP;AACA,eAAOA,KAAK,CAACI,IAAN,CAAWJ,KAAlB;AACH;;AACD,aAAOA,KAAP;AACH,KAPD,CAOE,OAAOM,KAAP,EAAc;AACZ,YAAM,IAAIQ,KAAJ,CAAUR,KAAV,CAAN;AACH;AACJ;;AAGD,iBAAeS,gBAAf,CAAgCF,SAAhC,EAA2C;AACvC,QAAI;AACA,UAAIG,QAAQ,GAAG,MAAMnC,UAAU,CAACgC,SAAD,CAA/B;;AACA,UAAIG,QAAQ,CAACZ,IAAT,CAAcC,OAAlB,EAA2B;AACvBK,QAAAA,OAAO,CAACM,QAAQ,CAACZ,IAAT,CAAcJ,KAAf,CAAP;AACA,eAAOgB,QAAQ,CAACZ,IAAhB;AACH;;AACD,aAAOY,QAAQ,CAACZ,IAAhB;AACH,KAPD,CAOE,OAAOE,KAAP,EAAc;AACZ,YAAM,IAAIQ,KAAJ,CAAUR,KAAV,CAAN;AACH;AAEJ,GA9EkC,CAgFnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AACA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAElB,MAAAA,EAAF;AAAMU,MAAAA,OAAN;AAAeiB,MAAAA,gBAAf;AAAiCH,MAAAA,gBAAjC;AAAmDrB,MAAAA;AAAnD,KAA7B;AAAA,cACKN,KAAK,CAACgC;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA9GM;;GAAMjC,Y;UAIKN,a,EACGF,W,EACPD,U;;;KANDS,Y","sourcesContent":["import React from 'react'\nimport { useHistory, useLocation, useParams, useRouteMatch } from 'react-router';\nimport { fetchMe, loginAdmin, loginLocal } from '../feature/auth/auth-api-services';\n\n/**\n * @typedef AuthContext\n * @property {any} me\n * @property {boolean} loading\n * @property { (profile: object, shopName: string) => PromiseLike<void> } handleLineLogin\n * @property { (profile: object) => PromiseLike<void> } handleAdminLineLogin\n * @property { () => boolean } isAdmin\n */\n\n/** @type {import('react').Context<AuthContext>} */\nexport const AuthContext = React.createContext();\n\nexport const AuthProvider = (props) => {\n    console.log('props : ' , props)\n    const [me, setMe] = React.useState({});\n    const [loading, setLoading] = React.useState(true);\n    const match = useRouteMatch();\n    const location = useLocation();\n    const h = useHistory();\n\n    \n    React.useEffect(() => {\n        fetchInit();\n    }, []);\n\n    const isAdmin = () => {\n        if (loading == true) return false;\n        return me.userType === 'ADMIN'\n    }\n\n    const fetchInit = async () => {\n        try {\n            setLoading(true);\n            let token = localStorage.getItem('token');\n            console.log('fetchInit token : ' , token)\n            if (token) {\n                let res = await fetchMe();\n                if (res.data.success) {\n                    setMe(res.data.data);\n                }\n            } else {\n                // h.push(props.match.url);\n            }\n\n        } catch (error) {\n            console.log(error);\n            localStorage.removeItem('token');\n            h.push(match.url);\n        } finally {\n            setLoading(false);\n        }\n    }\n\n\n    function setAuth(token) {\n        setMe(token);\n        if (token) {\n            localStorage.setItem('token', token);\n        } else {\n            localStorage.removeItem('token');\n        }\n    }\n\n\n    async function handleAdminLogin(loginData) {\n        try {\n            let token = await loginAdmin(loginData);\n            if (token.data.token) {\n                setAuth(token.data.token);\n                return token.data.token\n            }\n            return token\n        } catch (error) {\n            throw new Error(error)\n        }\n    }\n\n\n    async function handleLocalLogin(loginData) {\n        try {\n            let resLogin = await loginLocal(loginData);\n            if (resLogin.data.success) {\n                setAuth(resLogin.data.token);\n                return resLogin.data\n            }\n            return resLogin.data\n        } catch (error) {\n            throw new Error(error)\n        }\n\n    }\n\n    // const handleLogout = (e) => {\n    //     e.preventDefault();\n    //     Swal.fire({\n    //         title: 'ต้องการออกจากระบบหรือไม่ ?',\n    //         // text: \"ยืนยันการออกจากระบบ!\",\n    //         type: 'warning',\n    //         showCancelButton: true,\n    //         confirmButtonColor: '#409444',\n    //         cancelButtonColor: '#8B1515',\n    //         confirmButtonText: 'ตกลง',\n    //         showLoaderOnConfirm: true,\n    //         cancelButtonText: 'ยกเลิก',\n    //     }).then(res => {\n    //         if (res.value === true) {\n    //             let part = location.pathname.split('/')\n    //             let shopName = part[2];\n    //             // let page = part[2];\n    //             setAuth({}, null);\n    //             h.push(`/shop/${shopName}/`);\n    //             $('#smart_q_navbar').collapse('hide')\n\n    //         }\n    //     })\n\n    // }\n    return (\n        <AuthContext.Provider value={{ me, isAdmin, handleLocalLogin, handleAdminLogin, loading }}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}