{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pegatech/Downloads/todo_react_app/src/hook/todo-context.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { getTodoList } from '../feature/todo/todo-api-service';\n/**\n * @typedef TodoContext\n * @property {any} todo\n * @property {boolean} loading\n */\n\n/** @type {import('react').Context<TodoContext>} */\n\nexport const TodoContext = /*#__PURE__*/React.createContext();\nexport const TodoProvider = props => {\n  _s();\n\n  const p = useParams();\n  const history = useHistory();\n  const [todo, setTodo] = React.useState({});\n  const [todoList, setTodoList] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n  React.useEffect(() => {\n    fetchAll();\n  }, []);\n\n  async function fetchAll() {\n    let res = await getTodoList();\n\n    if (res) {\n      setTodoList(res);\n      setLoading(false);\n      return todoList;\n    }\n\n    history.push('/404');\n  }\n\n  const dispatch = data => {\n    setTodo(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TodoContext.Provider, {\n    value: {\n      loading,\n      todoList,\n      fetchAll\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TodoProvider, \"iQcYN2GzTJNjF4pBGlE6OHGB7Ss=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = TodoProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoProvider\");","map":{"version":3,"sources":["/Users/pegatech/Downloads/todo_react_app/src/hook/todo-context.jsx"],"names":["React","useHistory","useParams","getTodoList","TodoContext","createContext","TodoProvider","props","p","history","todo","setTodo","useState","todoList","setTodoList","loading","setLoading","useEffect","fetchAll","res","push","dispatch","data","children"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AACA,SAASC,WAAT,QAA4B,kCAA5B;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AACA,OAAO,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB;AAEP,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AACnC,QAAMC,CAAC,GAAGN,SAAS,EAAnB;AACA,QAAMO,OAAO,GAAGR,UAAU,EAA1B;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBX,KAAK,CAACY,QAAN,CAAe,EAAf,CAAxB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bd,KAAK,CAACY,QAAN,CAAe,EAAf,CAAhC;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBhB,KAAK,CAACY,QAAN,CAAe,IAAf,CAA9B;AAEAZ,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AAClBC,IAAAA,QAAQ;AACX,GAFD,EAEG,EAFH;;AAIA,iBAAeA,QAAf,GAA0B;AAEtB,QAAIC,GAAG,GAAG,MAAMhB,WAAW,EAA3B;;AACA,QAAIgB,GAAJ,EAAS;AACLL,MAAAA,WAAW,CAACK,GAAD,CAAX;AACAH,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOH,QAAP;AACH;;AACDJ,IAAAA,OAAO,CAACW,IAAR,CAAa,MAAb;AACH;;AAED,QAAMC,QAAQ,GAAIC,IAAD,IAAU;AACvBX,IAAAA,OAAO,CAACW,IAAD,CAAP;AACH,GAFD;;AAIA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEP,MAAAA,OAAF;AAAWF,MAAAA,QAAX;AAAsBK,MAAAA;AAAtB,KAA7B;AAAA,cACKX,KAAK,CAACgB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA/BM;;GAAMjB,Y;UACCJ,S,EACMD,U;;;KAFPK,Y","sourcesContent":["import React from 'react'\nimport { useHistory, useParams } from 'react-router-dom';\nimport { getTodoList } from '../feature/todo/todo-api-service'\n\n/**\n * @typedef TodoContext\n * @property {any} todo\n * @property {boolean} loading\n */\n\n/** @type {import('react').Context<TodoContext>} */\nexport const TodoContext = React.createContext();\n\nexport const TodoProvider = (props) => {\n    const p = useParams();\n    const history = useHistory();\n    const [todo, setTodo] = React.useState({});\n    const [todoList, setTodoList] = React.useState([])\n    const [loading, setLoading] = React.useState(true);\n\n    React.useEffect(() => {\n        fetchAll();\n    }, [])\n\n    async function fetchAll() {\n\n        let res = await getTodoList();\n        if (res) {\n            setTodoList(res);\n            setLoading(false);\n            return todoList;\n        }\n        history.push('/404');\n    }\n\n    const dispatch = (data) => {\n        setTodo(data);\n    }\n\n    return (\n        <TodoContext.Provider value={{ loading, todoList , fetchAll }}>\n            {props.children}\n        </TodoContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}