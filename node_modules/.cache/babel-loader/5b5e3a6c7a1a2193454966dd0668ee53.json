{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pegatech/Downloads/todo_react_app/src/feature/todo/TodoList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\nimport { getTodoList, createTodo, editTodo, deleteTodo } from '../todo/todo-api-service';\nimport { useHistory } from 'react-router-dom';\n\nfunction TodoList() {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n  const history = useHistory();\n\n  if (!localStorage.getItem('token')) {\n    history.push(`/`);\n    return;\n  }\n\n  useEffect(() => {\n    todoList();\n    return () => {};\n  }, []);\n\n  const todoList = async () => {\n    let test = await getTodoList();\n    setTodos(test.data);\n  };\n\n  const addTodo = async todo => {\n    let data = await createTodo(todo);\n\n    if (data) {\n      const newTodos = [todo, ...todos];\n      setTodos(newTodos);\n      console.log(...todos);\n    }\n  };\n\n  const updateTodo = async (todoId, newValue) => {\n    let data = await editTodo(todoId, newValue);\n\n    if (data) {\n      setTodos(prev => prev.map(item => item.id === todoId ? newValue : item));\n    }\n  };\n\n  const removeTodo = async id => {\n    // let data =  await deleteTodo(id)\n    //   console.log('data ; ' , data)\n    const removedArr = [...todos].filter(todo => todo._id !== id);\n    setTodos(removedArr);\n  };\n\n  const completeTodo = id => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"row justify-content-center pt-5 pl-3 pr-3\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo List?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n      onSubmit: addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Todo, {\n      todos: todos,\n      completeTodo: completeTodo,\n      removeTodo: removeTodo,\n      updateTodo: updateTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TodoList, \"IeCshaNMGsyAF5JKi5JhoHtB80U=\", false, function () {\n  return [useHistory];\n});\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["/Users/pegatech/Downloads/todo_react_app/src/feature/todo/TodoList.jsx"],"names":["React","useState","useEffect","useContext","TodoForm","Todo","getTodoList","createTodo","editTodo","deleteTodo","useHistory","TodoList","todos","setTodos","history","localStorage","getItem","push","todoList","test","data","addTodo","todo","newTodos","console","log","updateTodo","todoId","newValue","prev","map","item","id","removeTodo","removedArr","filter","_id","completeTodo","updatedTodos","isComplete"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\nimport { getTodoList, createTodo, editTodo, deleteTodo } from '../todo/todo-api-service'\nimport { useHistory } from 'react-router-dom';\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([]);\n  const history = useHistory();\n\n  if (!localStorage.getItem('token')) {\n    history.push(`/`);\n    return\n  }\n\n  useEffect(() => {\n    todoList()\n    return () => {\n\n    }\n  }, [])\n\n  const todoList = async () => {\n\n    let test = await getTodoList()\n    setTodos(test.data)\n  }\n\n  const addTodo = async todo => {\n\n    let data = await createTodo(todo)\n\n    if (data) {\n      const newTodos = [todo, ...todos];\n\n      setTodos(newTodos);\n      console.log(...todos);\n    }\n\n  };\n\n  const updateTodo = async (todoId, newValue) => {\n\n    let data = await editTodo(todoId, newValue)\n    if (data) {\n      setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n    }\n\n  };\n\n  const removeTodo = async id => {\n\n    // let data =  await deleteTodo(id)\n    //   console.log('data ; ' , data)\n    const removedArr = [...todos].filter(todo => todo._id !== id);\n\n    setTodos(removedArr);\n  };\n\n  const completeTodo = id => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <>\n      <section className=\"row justify-content-center pt-5 pl-3 pr-3\">\n        <h1>Todo List?</h1>\n      </section>\n\n      <TodoForm onSubmit={addTodo} />\n      <Todo\n        todos={todos}\n        completeTodo={completeTodo}\n        removeTodo={removeTodo}\n        updateTodo={updateTodo}\n      />\n    </>\n  );\n}\n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}