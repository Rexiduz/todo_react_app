{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pegatech/Downloads/todo_react_app/src/feature/todo/TodoList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\nimport { getTodoList, createTodo } from '../todo/todo-api-service';\n\nfunction TodoList() {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    todoList();\n    return () => {};\n  }, []);\n\n  const addTodo = async todo => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    } // console.log('todo ; ' , todo)\n    // let data = await createTodo(todo)\n    // console.log('data : ' , data)\n    // if(!data){\n    //   return\n    // }\n\n\n    const newTodos = [todo, ...todos];\n    setTodos(newTodos);\n    console.log(...todos);\n  };\n\n  const todoList = async () => {\n    let test = await getTodoList();\n    setTodos(test.data);\n  };\n\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setTodos(prev => prev.map(item => item.id === todoId ? newValue : item));\n  };\n\n  const removeTodo = id => {\n    const removedArr = [...todos].filter(todo => todo.id !== id);\n    setTodos(removedArr);\n  };\n\n  const completeTodo = id => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"row justify-content-center pt-5 pl-3 pr-3\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todo List?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n      onSubmit: addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Todo, {\n      todos: todos,\n      completeTodo: completeTodo,\n      removeTodo: removeTodo,\n      updateTodo: updateTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TodoList, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["/Users/pegatech/Downloads/todo_react_app/src/feature/todo/TodoList.jsx"],"names":["React","useState","useEffect","useContext","TodoForm","Todo","getTodoList","createTodo","TodoList","todos","setTodos","todoList","addTodo","todo","text","test","newTodos","console","log","data","updateTodo","todoId","newValue","prev","map","item","id","removeTodo","removedArr","filter","completeTodo","updatedTodos","isComplete"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,WAAT,EAAuBC,UAAvB,QAAwC,0BAAxC;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,QAAQ;AACR,WAAO,MAAM,CAEZ,CAFD;AAGD,GALQ,EAKN,EALM,CAAT;;AAOA,QAAMC,OAAO,GAAG,MAAMC,IAAN,IAAc;AAC5B,QAAI,CAACA,IAAI,CAACC,IAAN,IAAc,QAAQC,IAAR,CAAaF,IAAI,CAACC,IAAlB,CAAlB,EAA2C;AACzC;AACD,KAH2B,CAI5B;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAME,QAAQ,GAAG,CAACH,IAAD,EAAO,GAAGJ,KAAV,CAAjB;AAEAC,IAAAA,QAAQ,CAACM,QAAD,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAGT,KAAf;AACD,GAdD;;AAgBA,QAAME,QAAQ,GAAG,YAAY;AAE3B,QAAII,IAAI,GAAG,MAAMT,WAAW,EAA5B;AACAI,IAAAA,QAAQ,CAACK,IAAI,CAACI,IAAN,CAAR;AACD,GAJD;;AAMA,QAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AACvC,QAAI,CAACA,QAAQ,CAACR,IAAV,IAAkB,QAAQC,IAAR,CAAaO,QAAQ,CAACR,IAAtB,CAAtB,EAAmD;AACjD;AACD;;AAEDJ,IAAAA,QAAQ,CAACa,IAAI,IAAIA,IAAI,CAACC,GAAL,CAASC,IAAI,IAAKA,IAAI,CAACC,EAAL,KAAYL,MAAZ,GAAqBC,QAArB,GAAgCG,IAAlD,CAAT,CAAR;AACD,GAND;;AAQA,QAAME,UAAU,GAAGD,EAAE,IAAI;AACvB,UAAME,UAAU,GAAG,CAAC,GAAGnB,KAAJ,EAAWoB,MAAX,CAAkBhB,IAAI,IAAIA,IAAI,CAACa,EAAL,KAAYA,EAAtC,CAAnB;AAEAhB,IAAAA,QAAQ,CAACkB,UAAD,CAAR;AACD,GAJD;;AAMA,QAAME,YAAY,GAAGJ,EAAE,IAAI;AACzB,QAAIK,YAAY,GAAGtB,KAAK,CAACe,GAAN,CAAUX,IAAI,IAAI;AACnC,UAAIA,IAAI,CAACa,EAAL,KAAYA,EAAhB,EAAoB;AAClBb,QAAAA,IAAI,CAACmB,UAAL,GAAkB,CAACnB,IAAI,CAACmB,UAAxB;AACD;;AACD,aAAOnB,IAAP;AACD,KALkB,CAAnB;AAMAH,IAAAA,QAAQ,CAACqB,YAAD,CAAR;AACD,GARD;;AAUA,sBACE;AAAA,4BACE;AAAS,MAAA,SAAS,EAAC,2CAAnB;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAEnB;AAApB;AAAA;AAAA;AAAA;AAAA,YALF,eAME,QAAC,IAAD;AACE,MAAA,KAAK,EAAEH,KADT;AAEE,MAAA,YAAY,EAAEqB,YAFhB;AAGE,MAAA,UAAU,EAAEH,UAHd;AAIE,MAAA,UAAU,EAAEP;AAJd;AAAA;AAAA;AAAA;AAAA,YANF;AAAA,kBADF;AAeD;;GAxEQZ,Q;;KAAAA,Q;AA0ET,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\nimport { getTodoList , createTodo} from '../todo/todo-api-service'\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([]);\n\n\n  useEffect(() => {\n    todoList()\n    return () => {\n\n    }\n  }, [])\n\n  const addTodo = async todo => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n    // console.log('todo ; ' , todo)\n    // let data = await createTodo(todo)\n    // console.log('data : ' , data)\n    // if(!data){\n    //   return\n    // }\n    const newTodos = [todo, ...todos];\n\n    setTodos(newTodos);\n    console.log(...todos);\n  };\n\n  const todoList = async () => {\n\n    let test = await getTodoList()\n    setTodos(test.data)\n  }\n\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n  };\n\n  const removeTodo = id => {\n    const removedArr = [...todos].filter(todo => todo.id !== id);\n\n    setTodos(removedArr);\n  };\n\n  const completeTodo = id => {\n    let updatedTodos = todos.map(todo => {\n      if (todo.id === id) {\n        todo.isComplete = !todo.isComplete;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <>\n      <section className=\"row justify-content-center pt-5 pl-3 pr-3\">\n        <h1>Todo List?</h1>\n      </section>\n\n      <TodoForm onSubmit={addTodo} />\n      <Todo\n        todos={todos}\n        completeTodo={completeTodo}\n        removeTodo={removeTodo}\n        updateTodo={updateTodo}\n      />\n    </>\n  );\n}\n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}